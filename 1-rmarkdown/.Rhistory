c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_cahr
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"parth")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(1:4,c("X","Y","Z"),sep = "")
paste(1:4,c("X","Y","Z"),sep = "-")
paste(LETTERS,1:4,sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- norm(1000)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y > 0
y[y > 0]
x
x[x>0]
x[!is.na(x) & x>0]
x
x[c(3,5,7)]
bye()
install.packages("Rfacebook")
install.packages("RCurl")
library(Rfacebook)
my_oath <- fbOAuth(app_id="1896563903901656", app_secret="f9a4f41c9d489f76843df92ede15175d",extended_permissions = TRUE)
save(my_oath,file = "my_oath")
load("my_oath")
me <- getUsers("me", token = my_oath)
me$name
getLikes("me", n = n , token)
getLikes("me", n = 5 , token)
getLikes(user = "me", n = 5 , token = my_oath)
getLikes(user = "me", 5 , token = my_oath)
getLikes(user = "Lin Lal Lai Khine", 5 , token = my_oath)
getLikes(user = "Sumanya Ng", 5 , token = my_oath)
getLikes(user = "Parth Sarangi", 5 , token = my_oath)
getLikes(user = "me", 5 , token = my_oath)
me
me <- getUsers("Lin Lal Lai Khine", token = my_oath)
me <- getUsers("Parth Sarangi", token = my_oath)
me <- getUsers("me", token = my_oath)
install.packages("gWidgets")
library(gWidgets)
options(guiToolkit="tcltk")
consKey <- ginput("Enter your consumer key:")
getwd()
setwd("/home/admin1/R")
getwd()
setwd("/home/admin1/")
getwd()
library(MASS)
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
data("Cars93")
View(Cars93)
nrow(Cars93)
ncol(Cars93)
head(Cars93)
filter(Cars93,Type=="Small")
filter(Cars93,Type=="Small",Max.Price<30)
filter(Cars93,Type=="Small",Max.Price<15)
filter(Cars93,Type=="Small",Max.Price<30)
filter(Cars93,AirBags=="Driver & Passenger")
slice(Cars93,1:20)
slice(Cars93,2:20)
mutate(Cars93,ratio = Max.Price/Min.Price)
select(Cars93,1:5)
select(Cars93,Manufacturer,Type,Price)
mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(cars93, Type), mean(meanmpg))
summarise(group_by(Cars93, Type), mean(meanmpg))
mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(Cars93, Type), mean(meanmpg))
cars93 <- mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(cars93, Type), mean(meanmpg))
n_distinct(Cars93$Type)
n_distinct(Cars93$Model)
n_distinct(Cars93$Manufacturer)
n_distinct(Cars93$AirBags)
top_n(Cars93)
top_n(Cars93,5,MPG.highway)
str(Cars93)
install.packages("rvest")
library(rvest)
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
rank_data_hrml <- html_nodes(webpage,'.text-primary')
rank_data_hrml
rank_data_hrml
rank_data <- html_text(rank_data_hrml)
rank_data
rank_data <- as.numeric(rank_data)
rank_data
title_data_html <- html_nodes(webpage,'.lister-item-header a')
title_data <- html_text(title_data_html)
head(title_data)
movies_df <- data.frame(Rank = rank_data, Title = title_data)
nrow(movies_df)
ncol(movies_df)
head(movies_df)
tail(movies_df)
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
exit
q()
index_dowjones
getwd()
dir()
dir("python")
dir("python/datasets/UCI_DowJonesIndex/")
index_downjones = read.csv("python/datasets/UCI_DowJonesIndex/dow_jones_index.data",header = TRUES, sep = ",")
index_downjones = read.csv("python/datasets/UCI_DowJonesIndex/dow_jones_index.data",header = TRUE, sep = ",")
index_downjones
data_churn = read.csv("Documents/Churn/Data1/churn.all",header = FALSE,sep = ",")
data_churn
data_churn[[1]]
data_churn[[0]]
colnames(data_churn)
data_churn_named <- setNames(data_churn,c("state","account length","area code","phone number","international plan","voice mail plan","number vmail messages","total day minutes","total day calls","total day charge","total eve minutes","total eve calls","total eve charge","total night minutes","total night calls","total night charge","total intl minutes","total intl calls","total intl charge","number customer service calls","churn value"))
data_churn_named
data_churn_named[[1]]
View(data_churn_named)
View(data_churn_named)
data_churn_named$state
table(data_churn_named$state).freq
data_churn_state_split <- split(data_churn_named,data_churn_named$state)
data_churn_state_split
data_churn_state_split$AK
nrow(data_churn_state_split$AK)
nrow(data_churn_state_split$AL)
install.packages("miniUI")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(shiny)
library(miniUI)
library(ggplot2)
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server)
}
ggbrush(mtcars, "hp", "mpg")
ggbrush(mtcars, "hp", "mpg")
library(shiny)
library(miniUI)
library(ggplot2)
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server,  viewer = paneViewer(minHeight = 500))
}
ggbrush(mtcars, "hp", "mpg")
runGadget(ui, server,  viewer = paneViewer(minHeight = 800))
library(shiny)
library(miniUI)
library(ggplot2)
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server,  viewer = paneViewer(minHeight = 800))
}
runGadget(ui, server,  viewer = paneViewer(minHeight = 800))
ggbrush(mtcars, "hp", "mpg")
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server,  viewer = paneViewer(minHeight = 800))
}
ggbrush(mtcars, "hp", "mpg")
library(shiny)
library(miniUI)
library(ggplot2)
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server, viewer = browserViewer())
}
ggbrush(mtcars, "hp", "mpg")
df1 <- c(c(1,2,3),c(5,6,7),c("a","b","c"))
df1
dim(df1)
df1 <- data.frame(c(1,2,3),c(5,6,7),c("a","b","c"))
df1
names(df1) <- c("v1","v2","v3")
df1
class(df1)
class(df1$v1)
class(df1$v2)
class(df1$v3)
class(data_churn$state)
View(data_churn)
View(data_churn_named)
class(data_churn_named$state)
for (state in data_churn_named$state) {print(state)}
unique(data_churn_named$state)
for (state in unique(data_churn_named$state)) {print(state)}
i=1;for (state in unique(data_churn_named$state)) {print(state,"c")}
state.freq = table(data_churn_named$state)
library(MASS)
pie(state.freq)
i=1;for (state in unique(data_churn_named$state)) {print(i)}
i=1;for (state in unique(data_churn_named$state)) {print(i);i+1;}
i=1;for (state in unique(data_churn_named$state)) {print(i);i++;}
i=1;for (state in unique(data_churn_named$state)) {print(i);i <- i+1;}
d <- c(1,1,2,3)
d
d <- c(2,2,3)
d
d <- c(1,1,2,3)
d <- c(d,2,2,3)
d
df
df2
length(df2)
length(d)
if(length(df2),1,0)
if(length(df2) > 1,1,0)
if(length(d) > 1,1,0)
if(length(df2) > 1) {print("True")}
if(length(d) > 1) {print("True")}
df <- 1
df
if(length(df) > 1) {print("True")}
if(length(df) > 1) {print("True")} else {print("False")}
list1 <- list(1:5)
v1 <- unlist(list1)
v1
list2 <-list(10:14)
v2 <- unlist(list2)
v2
esult <- v1+v2
esult
i=1;for (state in unique(data_churn_named$state)) {i=i+1}; l1 <- list(1:i);
l1
class(l1)
df1
df2
df2 <- data.frame(l1,unique(data_churn_named$state))
class(unique(data_churn_named$state))
unique(data_churn_named$state)
i=1;for (state in unique(data_churn_named$state)) {i=i+1;print(i)}; l1 <- list(1:i);
i=1;for (state in unique(data_churn_named$state)) {i=i+1;print(paste(i,state)}; l1 <- list(1:i);
i=1;for (state in unique(data_churn_named$state)) {i=i+1;print(paste(i,state))}; l1 <- list(1:i);
i=1;for (state in unique(data_churn_named$state)) {print(paste(i,state));i=i+1}; l1 <- list(1:i);
l1
i=1;for (state in unique(data_churn_named$state)) {print(paste(i,state));i=i+1}; l11 <- list(1:i);
l11
i=0;for (state in unique(data_churn_named$state)) {i=i+1;print(paste(i,state))}; l11 <- list(1:i);
l11
df2
df2 <- data.frame(l11,unique(data_churn_named$state))
df2
sort(x = unique(data_churn_named)$state,ascending)
sort(x = unique(data_churn_named)$state)
sort(x = unique(data_churn_named$state))
df2 <- data.frame(l11,sort(x = unique(data_churn_named$state)))
df2
install.packages("devtools")
install.packages(c("lattice", "scales", "leaflet", "RColorBrewer"))
install.packages("png")
install.packages("png")
install.packages("png")
install.packages(c("lattice", "scales", "leaflet", "RColorBrewer"))
library(leaflet)
df3 <- data.frame(Lat = 1:10, Long = rnorm(10))
df3
leaflet(df3) %>% addCircles()
leaflet() %>% addCircles(df3)
leaflet() %>% addCircles(data = df3)
leaflet() %>% addCircles(data = df3,lat= - Lat, lng = - Long)
leaflet() %>% addCircles(data = df3,lat= - Lat, lng = - Long)
leaflet() %>% addCircles(data = df3,lat = - Lat,lng = - Long)
leaflet() %>% addCircles(data = df3,lat = -Lat,lng = -Long)
install.packages("maps")
install.packages("maps")
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates = map("state", fill = TRUE, plot = FALSE)
summary(data_churn_named$`account length`)
plot(data_churn_named$`account length`)
plot(data_churn_named$`account length`,type = 'b')
plot(data_churn_named$`account length`,type = 'h')
plot(sort(data_churn_named$`account length`),type = 'b')
View(df2)
plot(sort(data_churn_named$`account length`),type = 'b')
names(data_churn_named)
data_churn_named$state[1:10]
data_churn_named[1:10,1]
data_churn_named[[1]]
data_churn_named[[1,2]]
data_churn_named[1,1]
data_churn_named[[1,1]]
class(data_churn_named[[1,1]])
class(data_churn_named[1,1])
class(data_churn_named[1:10,1])
class(data_churn_named[1:10,1])
class(data_churn_named[1])
class(data_churn_named[[1]])
for (i in data_churn_named[[1]]) { j=j+1} ; print(j
j=0; for (i in data_churn_named[[1]]) { j=j+1 } ; print(j)
j=0; for (i in data_churn_named[[1]]) {j=j+1; k=0; for (l in df2[[2]]) {k=k+1; if (i == k) {churn_df <- data.frame(df2[k,1],data_churn_named[j,])}} }
names(churn_df)
j=0; for (i in data_churn_named[[1]]) {j=j+1; k=0; for (l in df2[[2]]) {k=k+1; if (i == k) {print(df2[k,])}} }
j=0; for (i in data_churn_named[[1]]) {j=j+1; print(j) k=0; for (l in df2[[2]]) {k=k+1; if (i == k) {print(df2[k,])}} }
j=0; for (i in data_churn_named[[1]]) {j=j+1; print(j); k=0; for (l in df2[[2]]) {k=k+1; if (i == k) {print(df2[k,])}} }
j=0; for (i in data_churn_named[[1]]) {j=j+1; print(j); k=0; for (l in df2[[2]]) {k=k+1; print(k) if (i == k) {print(df2[k,])}} }
j=0; for (i in data_churn_named[[1]]) {j=j+1; print(j); k=0; for (l in df2[[2]]) {k=k+1; print(k); if (i == k) {print(df2[k,])}} }
j=0; for (i in data_churn_named[[1]]) {j=j+1; print(j); k=0; for (l in df2[[2]]) {k=k+1; print(j,k); if (i == k) {print(df2[k,])}} }
names(data_churn_named)
names(df2)
names(df2) <- c("state_serial","state")
names(df2)
merge(data_churn_named,df2,by="state")
tail(merge(data_churn_named,df2,by="state"))
churn_df <- merge(data_churn_named,df2,by="state")
View(churn_df)
churn_df(1,2)
data(churn_df(1,2))
churn_df[c(1,2)]
dim(churn_df)
for (i in 1:22) {print(i)}
paste(1,2,3,sep = ",")
paste(1:22,,sep = ",")
names(churn_df)
churn_df_1 <- churn_df[c(22.1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)]
View(churn_df_1)
factor(churn_df_1$`international plan`)
names(churn_df_1)
churn_df_1 <- churn_df[c(22,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)]
names(churn_df_1)
names(churn_df_1) <- c("state_serial","state","account_length","international_plan","voice_mail_plan","number_vmail_messages","total_day_minutes","total_day_calls","total_day_charge","total_eve_minutes","total_eve_calls","total_eve_charge","total_night_minutes","total_night_calls","total_night_charge","total_intl_minutes","total_intl_calls","total_intl_charge","number_customer_service_calls","churn_value")
df_yn <- data.frame(c("international_plan","international_plan_binary"),c("yes",1),c("no",0))
merge(churn_df_1,df_yn,by = "internatopnal_plan")
merge(churn_df_1,df_yn,by = "internatonal_plan")
df_yn
df_yn <- data.frame(international_plan = c("yes,no"),international_plan_binary = c(1,0))
df_yn
df_yn <- data.frame(international_plan = c("yes","no"),international_plan_binary = c(1,0))
df_yn
merge(churn_df_1,df_yn,by = "internatonal_plan")
merge(churn_df_1,df_yn,by = internatonal_plan)
merge(churn_df_1,df_yn,by = "internatonal_plan")
merge(churn_df_1,df_yn,by = "international_plan")
df_yn <- data.frame(voice_mail_plan = c("yes","no"),voice_mail_plan_binary = c(1,0))
df_yn
merge(churn_df_1,df_yn,by = "voice_mail_plan")
churn_df_1 <- merge(churn_df_1,df_yn,by = "voice_mail_plan")
df_yn <- data.frame(international_plan = c("yes","no"),international_plan_binary = c(1,0))
df_yn
churn_df_1 <- merge(churn_df_1,df_yn,by = "international_plan")
dim(churn_df_1)
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
library(RMySQL)
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
churndata <- fetch(dbSendQuery(mydb,"select * from tab_churn order by state ascending;"),n=-1)
dbListTables(mydb)
dbListFields(tab_churn)
dbListFields("tab_churn")
dbListFields(mydb,"tab_churn")
churndata <- fetch(dbSendQuery(mydb,"select * from tab_churn order by state;"),n=-1)
names(churndata)
View(churndata)
summary(state)
summary(churndata)
summary(churndata$state)
library(pysch)
library(psych)
describe(churndata)
summary(churndata$state)
summary(churndata)
save.image("~/R/.RData")
View(churndata)
names(churndata)
churndata[[5]]
for (as in churndata[[5]]) {print(class(as))}
setwd("~/R/1-rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(flexdashboard)
install.packages("flexdashboard")
# Rate at which to flag high download traffic
sliderInput("rateThreshold", "Warn when rate exceeds:",
min = 0, max = 50, value = 3, step = 0.1
)
# Maximum number of raw data rows to keep
numericInput("maxrows", "Recent downloads window:", 50)
install.packages("rmarkdown")
install.packages("rmarkdown")
