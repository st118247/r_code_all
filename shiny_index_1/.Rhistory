is.na()
is.na(s)
is.na(11)
is.na(0)
is.na()
x<-c(1,2,NA,10,3)
is.na()
is.na(x)
is.nan(x)
x<-c(1,2,NA,10,3,NaN)
is.nan(x)
x<-data.frame(foo=1:4, bar=c(T,T,F,F))
x
row(x)
nrow(x)
crow(x)
x<- 1:3
x
names(x)
names(x) <- c("foo","bar","norf")
names(x)
x
y <- r(1:3)
y <- c(1:3)
y
y <- c(1:3,1:3)
y
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a","b"), c("c","d"))
m
View(m)
library("cluster", lib.loc="/usr/lib/R/library")
installed.packages("swirl")
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("libcurl")
install.packages("swirl")
install.packages("curl")
install.packages("curl")
install.packages("swirl")
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.fir <- getwd()
old.dir <- getwd()
dir.create(test.dir)
dir.create(testdir)
dir.create(testdir,showWarnings = TRUE,recursive = FALSE, mode = "0777")
getwd()
dir.create("/home/admin1/testdir",showWarnings = TRUE,recursive = FALSE, mode = "0777")
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R", showWarnings = TRUE)
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.remove("mytest.R","mytest2.R")
file.remove("mytest.R", "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3",fsep = /), recursive = TRUE)
dir.create(file.path("testdir2","testdir3",fsep = '/'), recursive = TRUE)
file.path("testdir2","testdir3",fsep = '/')
dir.create(file.path("testdir","testdir2","testdir3",fsep = /), recursive = TRUE)
dir.create(file.path("testdir","testdir2","testdir3",fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3',fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3',fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3',fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
setwd(old.dir)
1:28
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
my_seq <- 1:length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- 0.5, 55, -10, 6
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c('My', 'name, 'is)
my_char <- c("My","name","is")
my_char
paste(my_char, co)
paste(my_char, collapse = " ")
my_name <- c(my_char,"parth")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world", collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
c("X","Y","Z",sep="")
paste(1:3,c("X","Y","Z",sep=""))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
swirl()
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_cahr
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"parth")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(1:4,c("X","Y","Z"),sep = "")
paste(1:4,c("X","Y","Z"),sep = "-")
paste(LETTERS,1:4,sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- norm(1000)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y > 0
y[y > 0]
x
x[x>0]
x[!is.na(x) & x>0]
x
x[c(3,5,7)]
bye()
install.packages("Rfacebook")
install.packages("RCurl")
library(Rfacebook)
my_oath <- fbOAuth(app_id="1896563903901656", app_secret="f9a4f41c9d489f76843df92ede15175d",extended_permissions = TRUE)
save(my_oath,file = "my_oath")
load("my_oath")
me <- getUsers("me", token = my_oath)
me$name
getLikes("me", n = n , token)
getLikes("me", n = 5 , token)
getLikes(user = "me", n = 5 , token = my_oath)
getLikes(user = "me", 5 , token = my_oath)
getLikes(user = "Lin Lal Lai Khine", 5 , token = my_oath)
getLikes(user = "Sumanya Ng", 5 , token = my_oath)
getLikes(user = "Parth Sarangi", 5 , token = my_oath)
getLikes(user = "me", 5 , token = my_oath)
me
me <- getUsers("Lin Lal Lai Khine", token = my_oath)
me <- getUsers("Parth Sarangi", token = my_oath)
me <- getUsers("me", token = my_oath)
install.packages("gWidgets")
library(gWidgets)
options(guiToolkit="tcltk")
consKey <- ginput("Enter your consumer key:")
getwd()
setwd("/home/admin1/R")
getwd()
setwd("/home/admin1/")
getwd()
library(MASS)
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
data("Cars93")
View(Cars93)
nrow(Cars93)
ncol(Cars93)
head(Cars93)
filter(Cars93,Type=="Small")
filter(Cars93,Type=="Small",Max.Price<30)
filter(Cars93,Type=="Small",Max.Price<15)
filter(Cars93,Type=="Small",Max.Price<30)
filter(Cars93,AirBags=="Driver & Passenger")
slice(Cars93,1:20)
slice(Cars93,2:20)
mutate(Cars93,ratio = Max.Price/Min.Price)
select(Cars93,1:5)
select(Cars93,Manufacturer,Type,Price)
mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(cars93, Type), mean(meanmpg))
summarise(group_by(Cars93, Type), mean(meanmpg))
mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(Cars93, Type), mean(meanmpg))
cars93 <- mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(cars93, Type), mean(meanmpg))
n_distinct(Cars93$Type)
n_distinct(Cars93$Model)
n_distinct(Cars93$Manufacturer)
n_distinct(Cars93$AirBags)
top_n(Cars93)
top_n(Cars93,5,MPG.highway)
str(Cars93)
install.packages("rvest")
library(rvest)
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
rank_data_hrml <- html_nodes(webpage,'.text-primary')
rank_data_hrml
rank_data_hrml
rank_data <- html_text(rank_data_hrml)
rank_data
rank_data <- as.numeric(rank_data)
rank_data
title_data_html <- html_nodes(webpage,'.lister-item-header a')
title_data <- html_text(title_data_html)
head(title_data)
movies_df <- data.frame(Rank = rank_data, Title = title_data)
nrow(movies_df)
ncol(movies_df)
head(movies_df)
tail(movies_df)
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
exit
q()
index_dowjones
getwd()
dir()
dir("python")
dir("python/datasets/UCI_DowJonesIndex/")
index_downjones = read.csv("python/datasets/UCI_DowJonesIndex/dow_jones_index.data",header = TRUES, sep = ",")
index_downjones = read.csv("python/datasets/UCI_DowJonesIndex/dow_jones_index.data",header = TRUE, sep = ",")
index_downjones
data_churn = read.csv("Documents/Churn/Data1/churn.all",header = FALSE,sep = ",")
data_churn
data_churn[[1]]
data_churn[[0]]
colnames(data_churn)
data_churn_named <- setNames(data_churn,c("state","account length","area code","phone number","international plan","voice mail plan","number vmail messages","total day minutes","total day calls","total day charge","total eve minutes","total eve calls","total eve charge","total night minutes","total night calls","total night charge","total intl minutes","total intl calls","total intl charge","number customer service calls","churn value"))
data_churn_named
data_churn_named[[1]]
View(data_churn_named)
View(data_churn_named)
data_churn_named$state
table(data_churn_named$state).freq
data_churn_state_split <- split(data_churn_named,data_churn_named$state)
data_churn_state_split
data_churn_state_split$AK
nrow(data_churn_state_split$AK)
nrow(data_churn_state_split$AL)
getwd()
setwd('R/shiny_template_1/')
list.files()
library(shiny)
runApp()
library("plotly", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
list.files()
app_data <- read.csv("churn_data.csv")
dim(app_data)
names(app_data)
renderPlot({
hist(app_data$number.vmail.messages)
})
hist(app_data$number.vmail.messages)
pie_chart_churn_counts <- table(app_data$churn.value)
plot(pie_chart_churn_counts,type=input$plotType)
plot(pie_chart_churn_counts)
plot(pie_chart_churn_counts,type = bar)
pie(pie_chart_churn_counts,labels = pie_label,main = "Total data composition of Churners")
pie_label <- c("Retained customers \n 4293","Churned customers \n 707")
pie(pie_chart_churn_counts,labels = pie_label,main = "Total data composition of Churners")
setwd('../shiny_try_template/')
runApp()
runApp()
setwd('../shiny_index_1/')
runApp()
runApp()
app_data_1 <- read.csv("churn_data.csv")
app_data_1 <- read.csv("churn_data.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
detach("package:grDevices", unload=TRUE)
pie(pie_chart_churn_counts,labels = pie_label,main = "Total data composition of Churners")
View(app_data_1)
View(app_data_1)
runApp()
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
dbClearResult(dbListResults(mydb)[[1]])
runApp()
runApp()
runApp()
View(app_data)
hist(app_data$total.intl.charge)
names(app_data)
radioButtons(inID,r1,choices=c("True","False No"),selected = "True")
radioButtons(inID,choices=c("True","False No"),selected = "True")
radioButtons(choices=c("True","False No"),selected = "True")
paste( n[!n %in% c("churn_value","state")],collapse=" + ")
as.formula(paste("churn_value ~", paste( n[!n %in% c("churn_value","state")],collapse=" + ")))
paste("a","b",collapse = ",")
paste("a","b",collapse = "+")
paste("a","b",sep = ",")
paste("a","b",sep = "+")
names(app_data)
paste(names(app_data),sep = "+")
paste(names(app_data),sep = ",")
paste( n[!n %in% c("churn_value","state")],collapse=" + ")
list.dirs()
list.files()
read.csv("churn_data.csv")
read.csv("churn_data.csv",header = TRUE)
as.character(total_day)
as.character("total_day")
s = total_day
s = "total_day"
as.character(s)
?hist
?ggplot
?filter()
?filter()
plot(app_data$total.day.calls)
plot(app_data$total.day.calls,type=bar)
plot(app_data$total.day.calls)
names(app_data)
names(app_data %in% c("X") )
names(app_data) %in% c("X") )
names(app_data) %in% c("X")
names(app_data) %in% c("X","state")
names(app_data)
f <- as.formula(paste("medv ~", paste(n[!n %in% "state"], collapse = " + ")))
f <- as.formula(paste("churn.value ~", paste(n[!n %in% "state"], collapse = " + ")))
n <- names(app_data)
f <- as.formula(paste("churn.value ~", paste(n[!n %in% "state"], collapse = " + ")))
f
hist(app_data$international.plan)
hist(app_data$total.intl.charge)
n <- total.intl.charge
n <- "total.intl.charge"
hist(app_data$n)
hist(app_data[n])
app_data[n]
hist(app_data[n])
x <- app_data$total.intl.charge
length(x)
dim(x)
hist(x)
n
y <- app_data$n
y
y <- app_data[n]
y
length(y)
names(y)
filter(.data = app_data,... = n)
n
y[1]
y[1,]
?split
split(app_data,n)
list(app_data$total.intl.charge)
n
list(app_data$n)
list(app_data[n])
as.vector(app_data[n])
as.vector(app_data[[n])
as.vector(app_data[[n]])
hist(as.vector(app_data[[n]]))
n
ggplot(app_data,total.intl.charge)
app_data[[1]]
app_data[[2]]
describe(app_data$X)
class(app_data$X)
class(app_data$state)
class(app_data$account.length)
class(app_data$international.plan)
class(app_data$number.vmail.messages)
paste("a","b",sep = ",")
for n in names(app_data)
for (n in names(app_data)) {print n}
for (n in names(app_data)) {print(n)}
class(app_data$number.vmail.messages)
ifelse(class(app_data$number.vmail.messages) == "integer",1,0)
for (n in names(app_data)) {ifelse(class(n) == "integer",print(n)) }
for (n in names(app_data)) {if(class(n) == "integer",print(n)) }
for (n in names(app_data)) {if(class(n) == "integer",print(n),) }
for (n in names(app_data)) {print(n)}
for (n in names(app_data)) {print(class(n)}
for (n in names(app_data)) {print(class(n))}
for (n in names(app_data)) {print(class(app_data$n))}
for (n in names(app_data)) {print(class(app_data[[n]]))}
for (n in names(app_data)) {if((class(app_data[[n]])) == "factor")  print(class(app_data[[n]]))}
for (n in names(app_data)) {if((class(app_data[[n]])) != "factor")  print(class(app_data[[n]]))}
for (n in names(app_data)) {if((class(app_data[[n]])) != "factor")  print(n)}
z <- for (n in names(app_data)) {if((class(app_data[[n]])) != "factor")  print(n)}
z <- for (n in names(app_data)) {if((class(app_data[[n]])) != "factor") n}
z
for (n in names(app_data)) {if((class(app_data[[n]])) != "factor") z[i] <- n i=i+1}
i = 1
for (n in names(app_data)) {if((class(app_data[[n]])) != "factor") z[i] <- n i=i+1}
for (n in names(app_data)) {if((class(app_data[[n]])) != "factor") z[i] <- n;i=i+1}
z
for (n in names(app_data)) {if((class(app_data[[n]])) != "factor") {z[i] <- n;i=i+1} }
z
app_data[[2]]
app_data[[2]].ascending
unique(app_data[[2]])
lapply(dbListConnections(MySQL()), dbDisconnect)
lapply(dbListConnections(MySQL()), dbDisconnect)
lapply(dbListConnections(MySQL()), dbDisconnect)
dbDisconnect()
dbDisconnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
library(RMySQL)
dbDisconnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
dbDisconnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
dbDisconnect(MySQL())
cn1 = dbDisconnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
con1 = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
dbDisconnect(con1
)
dbDisconnect(con1)
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
churn_state_counts <- fetch(dbSendQuery(mydb,"select v1.state,v1.counts as churners,v2.counts as non_churners from v_state_true_cnt as v1, v_state_false_cnt as v2 where v1.state=v2.state;"),n=-1)
dbClearResult(dbListResults(mydb)[[1]])
plot_ly(churn_state_counts,type='bar',x=churn_state_counts$state,y=churn_state_counts$churners,name="Churners") %>% add_trace(y=churn_state_counts$non_churners,name="Non-Churners") %>% layout(yaxis=list(title = "Counts"), barmode = 'group')
dbDisconnect(mydb)
dim(churn_state_counts)
churn_state_counts[,1]
churn_state_counts[,1:(nrow(churn_state_counts)+1)/2]
churn_state_counts[,1:((nrow(churn_state_counts)+1)/2)]
nrow(churn_state_counts) + 1
(nrow(churn_state_counts) + 1) / 2
churn_state_counts[,1:((nrow(churn_state_counts) + 1) / 2)]
paste(1,(nrow(churn_state_counts) + 1) / 2 , sep = ":")
churn_state_counts[,paste(1,(nrow(churn_state_counts) + 1) / 2 , sep = ":")]
churn_state_counts[,1:21]
churn_state_counts[1:21,1]
churn_state_counts[1:((nrow(churn_state_counts) + 1) / 2),1]
