x
row(x)
nrow(x)
crow(x)
x<- 1:3
x
names(x)
names(x) <- c("foo","bar","norf")
names(x)
x
y <- r(1:3)
y <- c(1:3)
y
y <- c(1:3,1:3)
y
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a","b"), c("c","d"))
m
View(m)
library("cluster", lib.loc="/usr/lib/R/library")
installed.packages("swirl")
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("libcurl")
install.packages("swirl")
install.packages("curl")
install.packages("curl")
install.packages("swirl")
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.fir <- getwd()
old.dir <- getwd()
dir.create(test.dir)
dir.create(testdir)
dir.create(testdir,showWarnings = TRUE,recursive = FALSE, mode = "0777")
getwd()
dir.create("/home/admin1/testdir",showWarnings = TRUE,recursive = FALSE, mode = "0777")
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R", showWarnings = TRUE)
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.remove("mytest.R","mytest2.R")
file.remove("mytest.R", "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3",fsep = /), recursive = TRUE)
dir.create(file.path("testdir2","testdir3",fsep = '/'), recursive = TRUE)
file.path("testdir2","testdir3",fsep = '/')
dir.create(file.path("testdir","testdir2","testdir3",fsep = /), recursive = TRUE)
dir.create(file.path("testdir","testdir2","testdir3",fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3',fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3',fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3',fsep = '/'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
setwd(old.dir)
1:28
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
my_seq <- 1:length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- 0.5, 55, -10, 6
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c('My', 'name, 'is)
my_char <- c("My","name","is")
my_char
paste(my_char, co)
paste(my_char, collapse = " ")
my_name <- c(my_char,"parth")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world", collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
c("X","Y","Z",sep="")
paste(1:3,c("X","Y","Z",sep=""))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
swirl()
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_cahr
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"parth")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(1:4,c("X","Y","Z"),sep = "")
paste(1:4,c("X","Y","Z"),sep = "-")
paste(LETTERS,1:4,sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- norm(1000)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y > 0
y[y > 0]
x
x[x>0]
x[!is.na(x) & x>0]
x
x[c(3,5,7)]
bye()
install.packages("Rfacebook")
install.packages("RCurl")
library(Rfacebook)
my_oath <- fbOAuth(app_id="1896563903901656", app_secret="f9a4f41c9d489f76843df92ede15175d",extended_permissions = TRUE)
save(my_oath,file = "my_oath")
load("my_oath")
me <- getUsers("me", token = my_oath)
me$name
getLikes("me", n = n , token)
getLikes("me", n = 5 , token)
getLikes(user = "me", n = 5 , token = my_oath)
getLikes(user = "me", 5 , token = my_oath)
getLikes(user = "Lin Lal Lai Khine", 5 , token = my_oath)
getLikes(user = "Sumanya Ng", 5 , token = my_oath)
getLikes(user = "Parth Sarangi", 5 , token = my_oath)
getLikes(user = "me", 5 , token = my_oath)
me
me <- getUsers("Lin Lal Lai Khine", token = my_oath)
me <- getUsers("Parth Sarangi", token = my_oath)
me <- getUsers("me", token = my_oath)
install.packages("gWidgets")
library(gWidgets)
options(guiToolkit="tcltk")
consKey <- ginput("Enter your consumer key:")
getwd()
setwd("/home/admin1/R")
getwd()
setwd("/home/admin1/")
getwd()
library(MASS)
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
data("Cars93")
View(Cars93)
nrow(Cars93)
ncol(Cars93)
head(Cars93)
filter(Cars93,Type=="Small")
filter(Cars93,Type=="Small",Max.Price<30)
filter(Cars93,Type=="Small",Max.Price<15)
filter(Cars93,Type=="Small",Max.Price<30)
filter(Cars93,AirBags=="Driver & Passenger")
slice(Cars93,1:20)
slice(Cars93,2:20)
mutate(Cars93,ratio = Max.Price/Min.Price)
select(Cars93,1:5)
select(Cars93,Manufacturer,Type,Price)
mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(cars93, Type), mean(meanmpg))
summarise(group_by(Cars93, Type), mean(meanmpg))
mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(Cars93, Type), mean(meanmpg))
cars93 <- mutate(Cars93,meanmpg=(MPG.city+MPG.highway)/2)
summarise(group_by(cars93, Type), mean(meanmpg))
n_distinct(Cars93$Type)
n_distinct(Cars93$Model)
n_distinct(Cars93$Manufacturer)
n_distinct(Cars93$AirBags)
top_n(Cars93)
top_n(Cars93,5,MPG.highway)
str(Cars93)
install.packages("rvest")
library(rvest)
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
rank_data_hrml <- html_nodes(webpage,'.text-primary')
rank_data_hrml
rank_data_hrml
rank_data <- html_text(rank_data_hrml)
rank_data
rank_data <- as.numeric(rank_data)
rank_data
title_data_html <- html_nodes(webpage,'.lister-item-header a')
title_data <- html_text(title_data_html)
head(title_data)
movies_df <- data.frame(Rank = rank_data, Title = title_data)
nrow(movies_df)
ncol(movies_df)
head(movies_df)
tail(movies_df)
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
exit
q()
index_dowjones
getwd()
dir()
dir("python")
dir("python/datasets/UCI_DowJonesIndex/")
index_downjones = read.csv("python/datasets/UCI_DowJonesIndex/dow_jones_index.data",header = TRUES, sep = ",")
index_downjones = read.csv("python/datasets/UCI_DowJonesIndex/dow_jones_index.data",header = TRUE, sep = ",")
index_downjones
data_churn = read.csv("Documents/Churn/Data1/churn.all",header = FALSE,sep = ",")
data_churn
data_churn[[1]]
data_churn[[0]]
colnames(data_churn)
data_churn_named <- setNames(data_churn,c("state","account length","area code","phone number","international plan","voice mail plan","number vmail messages","total day minutes","total day calls","total day charge","total eve minutes","total eve calls","total eve charge","total night minutes","total night calls","total night charge","total intl minutes","total intl calls","total intl charge","number customer service calls","churn value"))
data_churn_named
data_churn_named[[1]]
View(data_churn_named)
View(data_churn_named)
data_churn_named$state
table(data_churn_named$state).freq
data_churn_state_split <- split(data_churn_named,data_churn_named$state)
data_churn_state_split
data_churn_state_split$AK
nrow(data_churn_state_split$AK)
nrow(data_churn_state_split$AL)
dim(data_churn_named)
test_indexes = sample(1:nrow(data_churn_named), size=0.2*nrow(data_churn_named))
data_training_churn <- data_churn_named[-test_indexes,]
dim(data_training_churn)
data_testing_churn <- data_churn_named{test_indexes,}
data_testing_churn <- data_churn_named[test_indexes,]
dim(data_testing_churn)
library(tree)
churn_model_dt <- tree(churn.value ~ .,data_training_churn)
churn_model_dt <- tree(`churn value`` ~ .,data_training_churn)
churn_model_dt <- tree("churn value" ~ .,data_training_churn)
churn_model_dt <- tree("churn value" ~ state + "account length",data_training_churn)
churn_model_dt <- tree("churn value" ~ state + "account length",data_training_churn)
churn_model_dt <- tree("churn value" ~ "state" + "account length",data_training_churn)
names(data_training_churn)
churn_model_dt <- tree("churn value" ~ "state" + "account length",data_training_churn)
library(ISLR)
attach(Carseats)
range(Sales)
High = ifelse(Sales >= 8, "Yes","No")
Lenght(High)
Length(High)
Carseats_new = data.frame(Carseats,High)
dim(Carseats_new)
set.seed(2)
train = sample(1:nrow(Carseats_new),nrow(Carseats_new)/2)
test = -train
training_data = Carseats_new[train,]
testing_data = Carseats_new[test,]
testing_High = High[test]
tree_model = tree(High~.,training_data)
names(Carseats)
names(training_data)
churn_model_dt <- tree(churn value ~ .,data_training_churn)
churn_model_dt <- tree(churn value~.,data_training_churn)
names(data_training_churn)
churn_model_dt <- tree("churn value" ~ "international plan" + "voicemail plan",data_training_churn)
make.names(names(data_training_churn))
new_names <- make.names(names(data_training_churn))
length(new_names)
new_names
colnames(data_training_churn) <- X
colnames(data_training_churn) <- new_names
names(data_training_churn)
churn_model_dt <- tree(churn.value ~ international.plan + voicemail.plan,data_training_churn)
churn_model_dt <- tree(churn.value ~ international.plan + voice.mail.plan,data_training_churn)
plot(churn_model_dt)
colnames(data_testing_churn) <- new_names
churn_model_dt <- tree(churn.value ~ .data_training_churn)
churn_model_dt <- tree(churn.value ~ .,data_training_churn)
levels(data_training_churn$state)
length(data_training_churn$state)
unique(data_training_churn$state)
unique(data_training_churn$account.length)
unique(data_training_churn$area.code)
unique(data_training_churn$phone.number)
unique(data_training_churn$international.plan)
unique(data_training_churn$number.vmail.messages)
unique(data_training_churn$state)
unique(data_training_churn$account.length)
unique(data_training_churn$area.code)
data_training_churn$area.code
unique(data_training_churn$phone.number)
getwd()
setwd("R/shinyapp_4/")
setwd("R/")
setwd("../")
getwd()
write.csv(data_churn_named)
write.csv(data_churn_named,file = "churn.csv")
dim(data_churn_named)
state_midwest <- read.csv("data_midwest_states")
state_northeast <- read.csv("data_northeast_states")
dim(state_midwest)
names(state_midwest)
names(state_midwest) <- c("Region","State")
names(state_midwest)
state_midwest
names(state_northeast) <- c("Region","State")
state_south <- read.csv("data_south_states")
state_west <- read.csv("data_west_states")
names(state_south) <- c("Region","State")
names(state_west) <- c("Region","State")
state_south
state_abbv <- read.csv("data_state_abbv")
dim(state_abbv)
names(state_abbv)
unique(data_churn_named)
length(unique(data_churn_named))
unique(data_churn_named$state)
dim(state_abbv)
for (i in i:length(state_abbv$Abbreviation)){print(i)}
for (i in i:length(state_abbv$Abbreviation)){print state_abbv[i]}
for (i in i:length(state_abbv$Abbreviation)){print (state_abbv[i])}
for (i in 1:length(state_abbv$Abbreviation)){print (state_abbv[i])}
for (i in 1:length(state_abbv$Abbreviation)){print (state_abbv$State.Possession[i])}
for (i in 1:length(state_abbv$Abbreviation)){print (state_abbv$State.Possession [i])}
for (i in 1:length(state_abbv$Abbreviation)){print (i)}
length(state_abbv)
for (i in 1:59) if state_abbv$Abbreviation[i] == "AK" state_abbv$State.Possession
for (i in 1:59) {if state_abbv$Abbreviation[i] == "AK" state_abbv$State.Possession}
for (i in 1:59) {if (state_abbv$Abbreviation[i] == "AK") state_abbv$State.Possession}
for (i in 1:59) {if (state_abbv$Abbreviation[i] == "AK") print(state_abbv$State.Possession)}
for (i in 1:59) {if (state_abbv$Abbreviation[i] == "KS") print(state_abbv$State.Possession)}
names(state_abbv)
head(state_abbv)
names(state_abbv) <- c("state_name","abbreviation")
head(state_abbv)
for (i in 1:59) {if (state_abbv$Abbreviation[i] == "KS") print(state_abbv$state_name)}
state_abbv$abbreviation{3}
state_abbv$abbreviation[3]
for (i in 1:59) {if (state_abbv$Abbreviation[i] == "AS") print(state_abbv$state_name)}
for (i in 1:length(state_abbv$abbreviation)) {if (state_abbv$Abbreviation[i] == "AS") print(state_abbv$state_name)}
for (i in 1:59) {if (state_abbv$Abbreviation[i] == "AS") print(state_abbv$state_name[i])}
state_abbv[1:2,2]
state_abbv[1:2,1]
state_abbv[2:2,2]
state_abbv[2:5,2]
state_abbv[2,2]
state_abbv[3,2]
state_abbv[6,2]
for (i in 1:59) {if (state_abbv[i,2] == "CA") print (state_abbv[i,1])}
for (i in 1:59) if (state_abbv[i,2] == "CA") print (state_abbv[i,1])
for (i in 1:59) if (state_abbv[i,2] == "CA") print(state_abbv[i,1])
ifelse(state_abbv[2,2] == "AK",yes = 1, no = 2)
ifelse(state_abbv[2,2] == AK,yes = 1, no = 2)
ifelse(state_abbv[2,2] = AK, yes = 1, no = 2)
ifelse(state_abbv[2,2] = "AK", yes = 1, no = 2)
ifelse(state_abbv[2,2] == "AK", yes = 1, no = 2)
x <- 9
if(x > 8) print("greater") else print("less")
x <- "ad"
x
if(x > 8) print("greater") else print("less")
if(x == "cd") print("greater") else print("less")
if(x == "ad") print("greater") else print("less")
state_abbv$abbreviation[1]
if(state_abbv$abbreviation[1] == AL) print("equal") else print("not equal")
if(state_abbv$abbreviation[1] == "AL") print("equal") else print("not equal")
if(state_abbv$abbreviation[1] == "al") print("equal") else print("not equal")
x <- state_abbv$abbreviation[1]
str(x)
dim(x)
length(x)
x
typeof(state_abbv[2,2])
state_abbv[2,2]
typeof(data_churn_named[1.1])
data_churn_named[1.1]
data_churn_named[1,1]
typeof(data_churn_named[1,1])
typeof(data_churn_named[5,1])
data_churn_named[5,1]
data_churn_named[5,3]
data_churn_named[5,2]
data_churn_named[5,1]
data_churn_named[5,4]
data_churn_named[5,1]
data_churn_named[5,2]
data_churn_named[5,5]
typeof(data_churn_named[5,5])
getwd()
list.files()
data_churn_named[5,4]
typeof(data_churn_named[5,4])
typeof(data_churn_named[1,19])
typeof(data_churn_named[1,18])
typeof(data_churn_named[1,17])
typeof(data_churn_named[1,16])
typeof(data_churn_named[1,15])
typeof(data_churn_named[1,10])
data_churn_named[,2]
data_churn_named[,3]
data_churn_named[,4]
unique(data_churn_named[,4])
unique(data_churn_named[,5])
unique(data_churn_named[,3])
unique(data_churn_named[,7])
typeof(data_churn_named[1,7])
typeof(data_churn_named[1,9])
typeof(data_churn_named[1,11])
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host="localhost")
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host="localhost:3306")
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host="http://localhost:3306")
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host="localhost")
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host="127.0.0.1:3306")
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host="127.0.0.1:23306")
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host="localhost:23306")
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1:3306')
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='http://127.0.0.1:3306')
mydb = dbConnect(MySQL(),user = 'root', password="zadmin1",dbname="db_churn",host='127.0.0.1')
dbListTables(mydb)
dbListFields(mydb,"tab_churn")
churn_data <- fetch(dbSendQuery(mydb,"select * from tab_churn"),n=-1)
dim(churn_data)
names(churn_data)
typeof(churn_data[1,1])
typeof(churn_data[1,2])
typeof(churn_data[1,3])
typeof(churn_data[1,21])
typeof(churn_data[1,20])
typeof(churn_data[1,19])
typeof(churn_data[1,18])
fetch(dbSendQuery(mydb,"select * from tab_churn"),n=3)
fetch(dbSendQuery(mydb,"select state, abbrev from tab_state_abbv where abbrev in (select distinct(state) from tab_churn);"),n=3)
dbClearResult(dbListResults(conn)[[1]])
dbClearResult(dbListResults(mydb)[[1]])
fetch(dbSendQuery(mydb,"select state, abbrev from tab_state_abbv where abbrev in (select distinct(state) from tab_churn);"),n=3)
fetch(dbSendQuery(mydb,"select state, abbrev from tab_state_abbv where abbrev in (select distinct(state) from tab_churn);"),n=6)
dbClearResult(dbListResults(mydb)[[1]])
result <- fetch(dbSendQuery(mydb,"select b.region, a.state, a.international_plan, a.voice_mail_plan, a.number_vmail_messages, a.total_day_minutes, a.total_day_calls, a.total_day_charge, a.total_eve_minutes, a.total_eve_calls, a.total_eve_charge, a.total_night_minutes, a.total_night_calls, a.total_night_charge, a.total_intl_minutes, a.total_intl_calls, a.total_intl_charge, a.number_customer_service_calls, a.churn_value from tab_state_abbv as b, tab_churn as a where a.state = b.abbrev;"),n=-1)
dim(result)
View(result)
View(result)
set.seed(2)
test_indices <- sample(1:nrow(result),size=0.3*norm(result))
test_indices <- sample(1:nrow(result),size=0.3*nrow(result))
length(test_indices)
testing_dataset <- result[test_indices]
testing_dataset <- result[test_indices,]
training_dataset <- result[-test_indices,]
dim(training_dataset)
dim(testing_dataset)
library(tree)
model_tree <- tree(churn_value ~ region + international_plan + voice_mail_plan + number_vmail_messages + number_customer_service_calls,training_dataset)
plot(model_tree)
model_tree <- tree(churn_value ~ .,training_dataset)
model_tree <- tree(churn_value ~ region + number_vmail_messages + number_customer_service_calls,training_dataset)
model_1tree <- tree(churn_value ~ region + number_vmail_messages + number_customer_service_calls,training_dataset)
names(training_dataset)
unique(result$region)
unique(result$churn_value)
unique(result$number_vmail_messages)
model_1tree <- tree(churn_value ~ region + number_vmail_messages,training_dataset)
model_1tree <- tree(churn_value ~ region,training_dataset)
plot(model_1tree)
model_1tree <- tree(churn_value ~ region + total_day_calls + total_eve_calls + total_night_calls + total_intl_calls,training_dataset)
getwd()
save.image("~/R/churn_r_env_dump.RData")
save.image("~/R/churn_r_env_dump_1.RData")
